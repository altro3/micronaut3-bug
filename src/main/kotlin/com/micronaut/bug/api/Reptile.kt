/*
 * Compute API
 * API for the Compute Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micronaut.bug.api

import com.micronaut.bug.api.Animal
import com.micronaut.bug.api.ColorEnum
import com.fasterxml.jackson.annotation.*
import io.micronaut.serde.annotation.Serdeable
import jakarta.validation.constraints.*
import jakarta.validation.Valid
import io.micronaut.core.annotation.Nullable
import jakarta.annotation.Generated
import io.swagger.v3.oas.annotations.media.Schema

/**
 * Reptile
 *
 * @param numLegs
 * @param fangs
 * @param fangDescription
 */
@Serdeable
@JsonPropertyOrder(
        Reptile.JSON_PROPERTY_NUM_LEGS,
        Reptile.JSON_PROPERTY_FANGS,
        Reptile.JSON_PROPERTY_FANG_DESCRIPTION
)
@Generated("io.micronaut.openapi.generator.KotlinMicronautServerCodegen")
data class Reptile (
    @NotNull
    @Schema(name = "numLegs", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_NUM_LEGS)
    var numLegs: Int,
    @NotNull
    @Schema(name = "fangs", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_FANGS)
    var fangs: Boolean,
    @Nullable
    @Schema(name = "fangDescription", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FANG_DESCRIPTION)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    var fangDescription: String? = null,
): Animal()  {

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false
        if (!super.equals(other)) return false
        other as Reptile

        if (numLegs != other.numLegs) return false
        if (fangs != other.fangs) return false
        if (fangDescription != other.fangDescription) return false

        return true
    }

    override fun hashCode(): Int {
        var result = super.hashCode()
        result = 31 * result + numLegs.hashCode()
        result = 31 * result + fangs.hashCode()
        result = 31 * result + (fangDescription?.hashCode() ?: 0)
        return result
    }

    override fun toString(): String {
        return "Reptile(numLegs='$numLegs', fangs='$fangs', fangDescription='$fangDescription', propertyClass='$propertyClass', color='$color')"
    }

    companion object {

        const val JSON_PROPERTY_NUM_LEGS = "numLegs"
        const val JSON_PROPERTY_FANGS = "fangs"
        const val JSON_PROPERTY_FANG_DESCRIPTION = "fangDescription"
    }
}
