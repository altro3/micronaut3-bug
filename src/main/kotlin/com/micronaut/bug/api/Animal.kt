/*
 * Compute API
 * API for the Compute Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micronaut.bug.api

import com.micronaut.bug.api.ColorEnum
import com.fasterxml.jackson.annotation.*
import io.micronaut.serde.annotation.Serdeable
import jakarta.validation.constraints.*
import jakarta.validation.Valid
import io.micronaut.core.annotation.Nullable
import jakarta.annotation.Generated
import io.swagger.v3.oas.annotations.media.Schema

/**
 * Animal
 *
 * @param color
 * @param propertyClass
 */
@Serdeable
@JsonPropertyOrder(
        Animal.JSON_PROPERTY_PROPERTY_CLASS,
        Animal.JSON_PROPERTY_COLOR
)
@Generated("io.micronaut.openapi.generator.KotlinMicronautServerCodegen")
@JsonIgnoreProperties(
        value = ["class"], // ignore manually set class, it will be automatically generated by Jackson during serialization
        allowSetters = true // allows the class to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "class", visible = true)
@JsonSubTypes(
        JsonSubTypes.Type(value = Bird::class, name = "ave"),
        JsonSubTypes.Type(value = Mammal::class, name = "mammalia"),
        JsonSubTypes.Type(value = Reptile::class, name = "reptilia")
)
open class Animal (
    @Nullable
    @Schema(name = "color", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COLOR)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    open var color: ColorEnum? = null,
    @Nullable
    @Schema(name = "class", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    open var propertyClass: String? = null,
) {

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false
        other as Animal

        if (propertyClass != other.propertyClass) return false
        if (color != other.color) return false

        return true
    }

    override fun hashCode(): Int {
        var result = propertyClass?.hashCode() ?: 0
        result = 31 * result + (color?.hashCode() ?: 0)
        return result
    }

    override fun toString(): String {
        return "Animal(propertyClass='$propertyClass', color='$color')"
    }

    companion object {

        const val JSON_PROPERTY_PROPERTY_CLASS = "class"
        const val JSON_PROPERTY_COLOR = "color"
    }
}
