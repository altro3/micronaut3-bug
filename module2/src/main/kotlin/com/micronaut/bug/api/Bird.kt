/*
 * Compute API
 * API for the Compute Service
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micronaut.bug.api

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonPropertyOrder
import io.micronaut.core.annotation.Nullable
import io.micronaut.serde.annotation.Serdeable
import io.swagger.v3.oas.annotations.media.Schema
import java.math.BigDecimal

/**
 * Bird
 *
 * @param numWings
 * @param beakLength
 * @param featherDescription
 */
@Serdeable
@JsonPropertyOrder(
        Bird.JSON_PROPERTY_NUM_WINGS,
        Bird.JSON_PROPERTY_BEAK_LENGTH,
        Bird.JSON_PROPERTY_FEATHER_DESCRIPTION
)
data class Bird(
        @Nullable
        @Schema(name = "numWings", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
        @JsonProperty(JSON_PROPERTY_NUM_WINGS)
        @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
        var numWings: Int? = null,
        @Nullable
        @Schema(name = "beakLength", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
        @JsonProperty(JSON_PROPERTY_BEAK_LENGTH)
        @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
        var beakLength: BigDecimal? = null,
        @Nullable
        @Schema(name = "featherDescription", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
        @JsonProperty(JSON_PROPERTY_FEATHER_DESCRIPTION)
        @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
        var featherDescription: String? = null,
) : Animal() {

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false
        if (!super.equals(other)) return false
        other as Bird

        if (numWings != other.numWings) return false
        if (beakLength != other.beakLength) return false
        if (featherDescription != other.featherDescription) return false

        return true
    }

    override fun hashCode(): Int {
        var result = super.hashCode()
        result = 31 * result + (numWings?.hashCode() ?: 0)
        result = 31 * result + (beakLength?.hashCode() ?: 0)
        result = 31 * result + (featherDescription?.hashCode() ?: 0)
        return result
    }

    override fun toString(): String {
        return "Bird(numWings='$numWings', beakLength='$beakLength', featherDescription='$featherDescription', propertyClass='$propertyClass', color='$color')"
    }

    companion object {

        const val JSON_PROPERTY_NUM_WINGS = "numWings"
        const val JSON_PROPERTY_BEAK_LENGTH = "beakLength"
        const val JSON_PROPERTY_FEATHER_DESCRIPTION = "featherDescription"
    }
}
