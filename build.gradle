plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.25"
    id("org.jetbrains.kotlin.kapt") version "1.9.25"
//    id("com.google.devtools.ksp") version "1.9.25-1.0.20"
    id 'io.micronaut.application' version '4.5.3'
    id 'io.micronaut.openapi' version '4.5.3'
//    id 'io.micronaut.aot' version '4.5.3'
//    id 'org.openapi.generator' version '7.12.0'
}

ext {

    ver = [
            micronaut: '4.8.2',
            core     : '4.8.13',
            openapi  : '6.16.0-1-SNAPSHOT',
            serde    : '2.14.0',
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.10'
    jreImageNative = 'debian:stable-slim'
}

mainClassName = "com.micronaut.bug.Application"
micronaut {
    version ver.micronaut
    runtime "netty"
    testRuntime "junit5"
    enableNativeImage false
    processing {
        group project.group
        incremental true
        annotations "com.micronaut.bug.*"
    }
//    aot {
//        possibleEnvironments = ["local"]
//        targetEnvironments = ["local"]
//        optimizeServiceLoading = true
//        convertYamlToJava = true
//        precomputeOperations = true
//        cacheEnvironment = true
//        optimizeClassLoading = true
//        deduceEnvironment = true
//        optimizeNetty = true
//    }
    openapi {
        version = ver.openapi
        client("client", file("swagger.yml")) {
            lang = "kotlin"
            apiPackageName = "com.generated.client1.api"
            modelPackageName = "com.generated.client1.model"
            invokerPackageName = "com.generated.auth"
//            clientId = "client1"
            useAuth = true
            additionalProperties = [
                    useOauth: true,
                    useBasicAuth: true,
                    useApiKeyAuth: true,
                    authFilter: true,
//                    authConfigName: "test",
//                    authFilterClientIds: "",
//                    authFilterExcludedClientIds: ["client3", "client4"],
//                    authorizationFilterPatternStyle: "regex",
//                    authorizationFilterPattern: "/test;/different/simple/path/**;/something/else"
            ]
        }
        client("client2", file("swagger2.yml")) {
            lang = "kotlin"
            apiPackageName = "com.generated.client2.api"
            modelPackageName = "com.generated.client2.model"
            invokerPackageName = "com.generated.auth"
            clientId = "client2"
            useAuth = true
            additionalProperties = [
                    generateAuthClasses: false
            ]
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dockerfile {
    baseImage(jreImage)
    args "-Dfile.encoding=UTF-8"
}
graalvmNative {
    binaries {
        toolchainDetection = false
        main {
            verbose = true
        }
    }
}
dockerfileNative {
    baseImage(jreImageNative)
}

dependencies {

//    ksp("io.micronaut.validation:micronaut-validation-processor")
//    ksp("io.micronaut.serde:micronaut-serde-processor:$ver.serde")
//    ksp("io.micronaut:micronaut-inject-kotlin")
//    ksp("io.micronaut.openapi:micronaut-openapi:$ver.openapi")
//    ksp("io.micronaut.security:micronaut-security-annotations")

    kapt("io.micronaut.validation:micronaut-validation-processor")
    kapt("io.micronaut.serde:micronaut-serde-processor:$ver.serde")
    kapt("io.micronaut:micronaut-inject-kotlin")
    kapt("io.micronaut.openapi:micronaut-openapi:$ver.openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")

    compileOnly "io.micronaut:micronaut-inject-kotlin"
    compileOnly "io.micronaut.openapi:micronaut-openapi-annotations"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations"

    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.micronaut.serde:micronaut-serde-jackson"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "io.micronaut.security:micronaut-security-oauth2"

//    runtimeOnly "io.micronaut:micronaut-jackson-databind"
    runtimeOnly "io.micronaut.serde:micronaut-serde-jackson:$ver.serde"
    runtimeOnly "ch.qos.logback:logback-classic"
    runtimeOnly "org.yaml:snakeyaml"
}

kotlin {
    jvmToolchain(17)
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


/*
kapt{
    arguments {
        arg("sample.argument", "sample value")
        arg("micronaut.classloader.logging", "false")
        arg("micronaut.openapi.adoc.templates.links", "links1.ftl")
        arg("micronaut.openapi.expand.teststst", "this is test")

    }
}
*/

/*
tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}
*/

configurations.configureEach {
    resolutionStrategy {
//        dependencySubstitution {
//            substitute(module("io.micronaut:micronaut-jackson-databind"))
//                    .using(module("io.micronaut.serde:micronaut-serde-jackson:1.3.2"))
//        }

        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}

/*
tasks.register("generateApi", org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class) {
    generatorName.set("kotlin")
    library.set("jvm-spring-restclient")
    inputSpec.set("$rootDir/swagger.yml")
    apiPackage.set("com.example.openapi.api")
    modelPackage.set("com.example.openapi.api")
    outputDir.set(layout.buildDirectory.dir("generated/openapi").get().toString())
    enablePostProcessFile.set(true)
    skipOverwrite.set(false)
    generateModelTests.set(false)
    generateModelDocumentation.set(false)
    generateApiTests.set(false)
    generateApiDocumentation.set(false)
    configOptions.set([
                    "useSpringBoot3": "true",
                    "serializationLibrary" : "jackson",
                    "openApiNullable" : "false",
                    "generateOneOfAnyOfWrappers" : "true",
                    "generateConstructorWithAllArgs" : "true",
                    "useOneOfInterfaces" : "true",
                    "useBeanValidation" : "true",
                    "useJakartaEe" : "true",
    ])
    group = "openapi tools"
}*/
