plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
//    id("org.jetbrains.kotlin.kapt") version "1.9.22"
    id("com.google.devtools.ksp") version "1.9.22-1.0.17"
    id 'io.micronaut.application' version '4.3.2'
//    id 'io.micronaut.aot' version '4.2.1'
}

ext {

    ver = [
            micronaut: '4.3.1',
            core     : '4.3.5',
            openapi  : '6.5.1!!',
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.9'
    jreImageNative = 'debian:stable-slim'
}

mainClassName = "com.micronaut.bug.Application"
micronaut {
    version ver.micronaut
    runtime "netty"
    testRuntime "junit5"
    enableNativeImage false
    processing {
        group project.group
        incremental true
        annotations "com.micronaut.bug.*"
    }
//    aot {
//        optimizeServiceLoading = true
//        convertYamlToJava = true
//        precomputeOperations = true
//        cacheEnvironment = true
//        optimizeClassLoading = true
//        deduceEnvironment = true
//        optimizeNetty = true
//    }
}

wrapper.gradleVersion = '8.5'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dockerfile {
    baseImage(jreImage)
    args "-Dfile.encoding=UTF-8"
}
graalvmNative {
    binaries {
        toolchainDetection = false
        main {
            verbose = true
        }
    }
}
dockerfileNative {
    baseImage(jreImageNative)
}

dependencies {

    ksp("io.micronaut.validation:micronaut-validation-processor")
    ksp("io.micronaut.serde:micronaut-serde-processor")
    ksp("io.micronaut:micronaut-inject-kotlin")
    ksp("io.micronaut.openapi:micronaut-openapi")
    ksp("io.micronaut.security:micronaut-security-annotations")

//    kapt("io.micronaut.validation:micronaut-validation-processor")
//    kapt("io.micronaut.serde:micronaut-serde-processor")
//    kapt("io.micronaut:micronaut-inject-kotlin")
//    kapt("io.micronaut.openapi:micronaut-openapi")
//    kapt("io.micronaut.security:micronaut-security-annotations")

    compileOnly "io.micronaut.openapi:micronaut-openapi-annotations"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations"

    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.serde:micronaut-serde-api"
    implementation "io.micronaut:micronaut-inject-kotlin"
    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.micronaut:micronaut-runtime"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

//    runtimeOnly "io.micronaut:micronaut-jackson-databind"
    runtimeOnly "io.micronaut.serde:micronaut-serde-jackson"
    runtimeOnly "ch.qos.logback:logback-classic"
    runtimeOnly "org.yaml:snakeyaml"
}

kotlin {
    jvmToolchain(17)
}


/*
kapt{
    arguments {
        arg("sample.argument", "sample value")
        arg("micronaut.classloader.logging", "false")
        arg("micronaut.openapi.adoc.templates.links", "links1.ftl")
        arg("micronaut.openapi.expand.teststst", "this is test")

    }
}
*/

/*
tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}
*/

configurations.configureEach {
    resolutionStrategy {
//        dependencySubstitution {
//            substitute(module("io.micronaut:micronaut-jackson-databind"))
//                    .using(module("io.micronaut.serde:micronaut-serde-jackson:1.3.2"))
//        }

        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}
