plugins {
    id 'java'
    id "org.springframework.boot" version "3.5.6"
    id 'org.jetbrains.kotlin.jvm'
//    id 'io.micronaut.application' version '4.5.0'
//    id 'io.micronaut.aot' version '4.5.0'
//    id 'io.micronaut.openapi' version '4.5.0'
//    id 'org.openapi.generator' version '7.12.0'
}

ext {

    ver = [
            springBoot: '3.5.6',
            micronaut : '4.10.0',
            core      : '4.10.7',
            openapi   : '6.19.1',
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.10'
    jreImageNative = 'debian:stable-slim'
}

java {
}

dependencies {

    annotationProcessor(
            platform("org.springframework.boot:spring-boot-dependencies:$ver.springBoot"),
            "org.springframework.boot:spring-boot-configuration-processor",
            "org.projectlombok:lombok",
    )

    compileOnly(
            "org.projectlombok:lombok",
    )

    implementation(
            platform("org.springframework.boot:spring-boot-dependencies:$ver.springBoot"),
            "org.springframework.boot:spring-boot-starter-webflux",
            "org.springframework.boot:spring-boot-starter-logging",
            "org.springframework.boot:spring-boot-starter-json",
            "org.springframework.boot:spring-boot-starter-validation",
            "org.springframework.boot:spring-boot-starter-actuator",
            "ch.qos.logback:logback-classic",
    )
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

//project.gradle.startParameter.excludedTaskNames.add("generateServerOpenApiModels")
//tasks.named("generateServerOpenApiApis") {
//    it.enabled = false
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
    options.fork = true
//    options.forkOptions.jvmArgs += "-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.js.url=/openapi/res/"
}

configurations.configureEach {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}
repositories {
    mavenCentral()
}
kotlin {
    jvmToolchain(17)
}
