plugins {
    id 'io.micronaut.application' version '4.5.4'
//    id 'io.micronaut.aot' version '4.5.4'
//    id 'io.micronaut.openapi' version '4.5.4'
//    id 'org.openapi.generator' version '7.14.0'
}

ext {

    ver = [
            micronaut: '4.9.0',
            core     : '4.9.5',
            openapi  : '6.17.3',
            serde    : '2.14.0',
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.10'
    jreImageNative = 'debian:stable-slim'
}

mainClassName = "com.micronaut.bug.Application"
micronaut {
    version ver.micronaut
    runtime "netty"
    testRuntime "junit5"
    enableNativeImage false
    processing {
        group project.group
        incremental true
        annotations "com.micronaut.bug.*"
    }
//    aot {
//        possibleEnvironments = ["local"]
//        targetEnvironments = ["local"]
//        optimizeServiceLoading = true
//        convertYamlToJava = true
//        precomputeOperations = true
//        cacheEnvironment = true
//        optimizeClassLoading = true
//        deduceEnvironment = true
//        optimizeNetty = true
//    }
/*
    openapi {
        version = ver.openapi
        client("client", file("swagger.yml")) {
            apiPackageName = "com.generated.client1.api"
            modelPackageName = "com.generated.client1.model"
            invokerPackageName = "com.generated.auth"
            clientId = "client1"
            useAuth = true
            additionalProperties = [
                    useOauth: true,
                    useBasicAuth: true,
                    useApiKeyAuth: true,
                    authFilter: true,
                    authFilterClientIds: "client1;client2",
                    authFilterExcludedClientIds: ["client3", "client4"],
                    authorizationFilterPatternStyle: "regex",
                    authorizationFilterPattern: "/test;/different/simple/path/**;/something/else"
            ]
        }
        client("client2", file("swagger2.yml")) {
            authorizationFilterPattern = "/test;/different/simple/path/**;/something/else"
            apiPackageName = "com.generated.client2.api"
            modelPackageName = "com.generated.client2.model"
            invokerPackageName = "com.generated.auth"
            useAuth = true
            clientId = "client2"
            additionalProperties = [
                    generateAuthClasses: false
            ]
        }
    }
*/
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dockerfile {
    baseImage(jreImage)
    args "-Dfile.encoding=UTF-8"
}
graalvmNative {
    binaries {
        main {
            verbose = true
        }
    }
}
dockerfileNative {
    baseImage(jreImageNative)
}

dependencies {

    annotationProcessor "org.projectlombok:lombok"
//    annotationProcessor "io.micronaut.validation:micronaut-validation"
    annotationProcessor "io.micronaut:micronaut-core-processor"
    annotationProcessor "io.micronaut.serde:micronaut-serde-processor"
//    annotationProcessor "io.micronaut.security:micronaut-security-annotations"
    annotationProcessor "io.micronaut.openapi:micronaut-openapi:${ver.openapi}"
    annotationProcessor name: "test"

    compileOnly "org.projectlombok:lombok"
    compileOnly "io.micronaut:micronaut-inject-java"
    compileOnly "io.micronaut.openapi:micronaut-openapi-annotations:${ver.openapi}"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations"

    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.micronaut.serde:micronaut-serde-jackson"
    implementation "org.yaml:snakeyaml"
//    implementation "io.micronaut.security:micronaut-security-jwt"
//    implementation "io.micronaut.security:micronaut-security-oauth2"

    runtimeOnly "ch.qos.logback:logback-classic"
//    runtimeOnly "io.micronaut:micronaut-jackson-databind"

//    testAnnotationProcessor "org.projectlombok:lombok"
//    testAnnotationProcessor "io.micronaut:micronaut-core-processor"
//    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
//
//    testCompileOnly "org.projectlombok:lombok"
//    testCompileOnly "io.micronaut:micronaut-inject-java"
//
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.mockito:mockito-junit-jupiter"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

//    aotPlugins "org.yaml:snakeyaml"
}

//project.gradle.startParameter.excludedTaskNames.add("generateServerOpenApiModels")
//tasks.named("generateServerOpenApiApis") {
//    it.enabled = false
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
    options.fork = true
    options.forkOptions.jvmArgs += "-Dmicronaut.openapi.environments=local"
}

tasks.named("inspectRuntimeClasspath") { enabled = false }

configurations.configureEach {
    resolutionStrategy {
//        dependencySubstitution {
//            substitute(module("io.micronaut:micronaut-jackson-databind"))
//                    .using(module("io.micronaut.serde:micronaut-serde-jackson:1.3.2"))
//        }

        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}

//compileJava {
//    dependsOn("generateClientOpenApiApis", "generateClientOpenApiModels")
//}

/*
tasks.register("generateApi", org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class) {
    generatorName.set("kotlin-spring")
    library.set("spring-boot")
    inputSpec.set("$rootDir/petstore.json")
    apiPackage.set("com.example.openapi.api")
    modelPackage.set("com.example.openapi.api")
    outputDir.set(layout.buildDirectory.dir("generated/openapi").get().toString())
//    enablePostProcessFile.set(true)
    skipOverwrite.set(false)
    generateModelTests.set(false)
    generateModelDocumentation.set(false)
    generateApiTests.set(false)
    generateApiDocumentation.set(false)
    skipValidateSpec.set(true)
    configOptions.set([
            "useTags" : "true",
//            "useSealed" : "true",
//            "useOneOfInterfaces" : "true",
//            "interfaceOnly" : "true",
//            "skipDefaultInterface" : "true",
//            "serializationLibrary" : "jackson",
//            "openApiNullable" : "false",
//            "serializableModel" : "true",
            "useSpringBoot3" : "true",
//            "generateOneOfAnyOfWrappers" : "true",
////            "useOneOfInterfaces" : "true",
//            "useBeanValidation" : "true",
//            "performBeanValidation" : "true",
    ])
    group = "openapi tools"
}
*/
