plugins {
    id 'java'
    id 'idea'
    id 'io.micronaut.application' version '3.4.0'
    id 'io.micronaut.aot' version '3.4.0'
    id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.1.13'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

ext {
    jreImage = 'bellsoft/liberica-openjre-alpine-musl:17.0.3'
    jreImageNative = 'debian:stable-slim'
}

mainClassName = "com.micronaut.bug.Application"
micronaut {
    version '3.4.4'
    runtime "netty"
    testRuntime "junit5"
    enableNativeImage true
    processing {
        group project.group
        incremental true
        annotations "com.micronaut.bug.*"
    }
    aot {
        cacheEnvironment = true
        optimizeServiceLoading = true
        optimizeClassLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        deduceEnvironment = false
    }
}

resolve {
    outputFileName = 'micronaut3-bug-1' // same as micronaut swagger file
    outputFormat = 'YAML'
    prettyPrint = 'TRUE'
    encoding = 'UTF-8'
    classpath = sourceSets.main.runtimeClasspath
    resourcePackages = ['com.micronaut.bug']
    readAllResources = 'FALSE'
    outputDir = file('build/classes/java/main/META-INF/swagger/') // as micronaut swagger dir path
}

wrapper.gradleVersion = '7.4.2'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dockerfile {
    baseImage(jreImage)
    args "-Dfile.encodig=UTF-8"
}
graalvmNative {
    binaries {
        toolchainDetection = false
        main {
            verbose = true
        }
    }
}
dockerfileNative {
    baseImage(jreImageNative)
}

dependencies {

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut.openapi:micronaut-openapi"

    compileOnly "org.projectlombok:lombok"
    compileOnly "io.micronaut:micronaut-inject-java"
    compileOnly "io.swagger.core.v3:swagger-annotations"
    compileOnly "javax.ws.rs:javax.ws.rs-api:2.1.1"

    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"

    runtimeOnly "ch.qos.logback:logback-classic"

    // micronaut-data
/*
    annotationProcessor "io.micronaut.data:micronaut-data-processor"
    runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"
    runtimeOnly "org.postgresql:postgresql"
    implementation "io.micronaut.data:micronaut-data-jdbc"
    runtimeOnly "io.micronaut.flyway:micronaut-flyway"
*/

}

tasks.withType(JavaCompile).all {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
}

/*
configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute(module("io.micronaut:micronaut-jackson-databind"))
                    .using(module("io.micronaut.serde:micronaut-serde-jackson:1.0.1"))
        }
    }
}
*/

idea {

    module {
        excludeDirs += file('.idea')
        excludeDirs += file('out')
    }
}
