plugins {
    id 'io.micronaut.application' version '4.4.2'
//    id 'io.micronaut.aot' version '4.4.2'
    id 'io.micronaut.openapi' version '4.4.2'
    id 'org.openapi.generator' version '7.7.0'
}

ext {

    ver = [
            micronaut: '4.5.1',
            core     : '4.5.4',
            openapi  : '6.11.1!!',
            serde    : '2.10.2!!'
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.10'
    jreImageNative = 'debian:stable-slim'
}

mainClassName = "com.micronaut.bug.Application"
micronaut {
    version ver.micronaut
    runtime "netty"
    testRuntime "junit5"
    enableNativeImage false
    processing {
        group project.group
        incremental true
        annotations "com.micronaut.bug.*"
    }
//    aot {
//        optimizeServiceLoading = true
//        convertYamlToJava = true
//        precomputeOperations = true
//        cacheEnvironment = true
//        optimizeClassLoading = true
//        deduceEnvironment = true
//        optimizeNetty = true
//    }
    openapi {
        version = ver.openapi
        client(file("swagger.yml")) {
            apiPackageName = "com.example.openapi.api"
            modelPackageName = "com.example.openapi.model"
            clientId = "test"
            useOptional = true
            useReactive = false
        }
    }
}

wrapper.gradleVersion = '8.9'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

dockerfile {
    baseImage(jreImage)
    args "-Dfile.encoding=UTF-8"
}
graalvmNative {
    binaries {
        toolchainDetection = false
        main {
            verbose = true
        }
    }
}
dockerfileNative {
    baseImage(jreImageNative)
}

dependencies {

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "io.micronaut.validation:micronaut-validation"
    annotationProcessor "io.micronaut.serde:micronaut-serde-processor"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut.openapi:micronaut-openapi:$ver.openapi"
    annotationProcessor "io.micronaut.security:micronaut-security-annotations"

    compileOnly "org.projectlombok:lombok"
    compileOnly "io.micronaut:micronaut-inject-java:$ver.core"
    compileOnly "io.micronaut.openapi:micronaut-openapi-annotations:$ver.openapi"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations"

    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server-netty:$ver.core"
    implementation "io.micronaut:micronaut-http-client:$ver.core"
    implementation "io.micronaut:micronaut-runtime:$ver.core"
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.micronaut.serde:micronaut-serde-api"

    runtimeOnly "ch.qos.logback:logback-classic"
    runtimeOnly "org.yaml:snakeyaml"
    runtimeOnly "io.micronaut.serde:micronaut-serde-jackson:$ver.serde"
//    runtimeOnly "io.micronaut:micronaut-jackson-databind"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
    options.fork = true
//    options.forkOptions.jvmArgs += "-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.js.url=/openapi/res/"
}

configurations.configureEach {
    resolutionStrategy {
//        dependencySubstitution {
//            substitute(module("io.micronaut:micronaut-jackson-databind"))
//                    .using(module("io.micronaut.serde:micronaut-serde-jackson:1.3.2"))
//        }

        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}

tasks.register("generateApi", org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class) {
    generatorName.set("java")
    library.set("restclient")
    inputSpec.set("$rootDir/swagger.yml")
    apiPackage.set("com.example.openapi.api")
    modelPackage.set("com.example.openapi.api")
    outputDir.set(layout.buildDirectory.dir("generated/openapi").get().toString())
    enablePostProcessFile.set(true)
    skipOverwrite.set(false)
    generateModelTests.set(false)
    generateModelDocumentation.set(false)
    generateApiTests.set(false)
    generateApiDocumentation.set(false)
    configOptions.set([
            "serializationLibrary" : "jackson",
            "openApiNullable" : "false",
            "generateOneOfAnyOfWrappers" : "true",
            "generateConstructorWithAllArgs" : "true",
//            "useOneOfInterfaces" : "true",
            "useBeanValidation" : "true",
            "useJakartaEe" : "true",
    ])
    group = "openapi tools"
}
