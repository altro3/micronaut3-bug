plugins {
    id 'java'
    id "org.springframework.boot" version "3.4.4"
    id 'com.google.cloud.tools.jib' version '3.4.5'
//    id 'io.micronaut.application' version '4.5.0'
//    id 'io.micronaut.aot' version '4.5.0'
//    id 'io.micronaut.openapi' version '4.5.0'
//    id 'org.openapi.generator' version '7.12.0'
}

ext {

    ver = [
            springBoot: '3.4.4',
            micronaut : '4.8.2',
            core      : '4.8.11',
            openapi   : '6.15.0',
            serde     : '2.14.0'
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.10'
    jreImageNative = 'debian:stable-slim'
}

wrapper.gradleVersion = '8.13'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dependencies {

    annotationProcessor(
            platform("org.springframework.boot:spring-boot-dependencies:$ver.springBoot"),
            "org.springframework.boot:spring-boot-configuration-processor",
            "org.projectlombok:lombok",
    )

    compileOnly(
            "org.projectlombok:lombok",
            "com.fasterxml.jackson.core:jackson-annotations",
    )

    implementation(
            platform("org.springframework.boot:spring-boot-dependencies:$ver.springBoot"),
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-logging",
            "org.springframework.boot:spring-boot-starter-json",
            "org.springframework.boot:spring-boot-starter-validation",
            "org.springframework.boot:spring-boot-starter-actuator",
            "ch.qos.logback:logback-classic",
            "com.github.kokorin.jaffree:jaffree:2024.08.29",
//            "org.bytedeco:javacpp:1.5.10:linux-x86_64",
//            "org.bytedeco:ffmpeg:6.1.1-1.5.10:linux-x86_64",
    )
//    implementation(
//            "org.bytedeco:javacpp:1.5.11:windows-x86_64",
//    )
}

//project.gradle.startParameter.excludedTaskNames.add("generateServerOpenApiModels")
//tasks.named("generateServerOpenApiApis") {
//    it.enabled = false
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
    options.fork = true
//    options.forkOptions.jvmArgs += "-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.js.url=/openapi/res/"
}

configurations.configureEach {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}

jib {
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        jvmFlags = [
                '-Dfile.encodig=UTF-8',
        ]
    }
    from {
        image = "localhost:5000/base-image:1.0.0"
        auth {
            username = 'admin'
            password = 'changeit'
        }
    }
    to {
        image = "localhost:5000/my-service:1.0.0"
        tags = ['1.0.0']
        auth {
            username = 'admin'
            password = 'changeit'
        }
    }
}