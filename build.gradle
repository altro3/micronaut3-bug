plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.20"
    id("org.jetbrains.kotlin.kapt") version "1.9.20"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.9.20"
    id 'io.micronaut.application' version '4.1.2'
    id 'io.micronaut.aot' version '4.1.2'
}

ext {

    ver = [
            micronaut: '4.1.6',
            core     : '4.2.0!!',
            serde    : '2.4.0!!',
            openapi  : '6.1.0!!',
    ]

    jreImage = 'bellsoft/liberica-openjre-alpine:17.0.9'
    jreImageNative = 'debian:stable-slim'
}

mainClassName = "com.micronaut.bug.Application"
micronaut {
    version ver.micronaut
    runtime "netty"
    testRuntime "junit5"
    enableNativeImage false
    processing {
        group project.group
        incremental true
        annotations "com.micronaut.bug.*"
    }
    aot {
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}

wrapper.gradleVersion = '8.4'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dockerfile {
    baseImage(jreImage)
    args "-Dfile.encoding=UTF-8"
}
graalvmNative {
    binaries {
        toolchainDetection = false
        main {
            verbose = true
        }
    }
}
dockerfileNative {
    baseImage(jreImageNative)
}

dependencies {

//    annotationProcessor "org.projectlombok:lombok"
//    annotationProcessor "io.micronaut:micronaut-inject-java"
//    annotationProcessor "io.micronaut.serde:micronaut-serde-processor:2.3.3!!"
//    annotationProcessor "io.micronaut.openapi:micronaut-openapi:$ver.openapi"

    kapt("io.micronaut.openapi:micronaut-openapi:$ver.openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")
    kapt("io.micronaut:micronaut-inject-kotlin:$ver.core")
    kapt("io.micronaut.serde:micronaut-serde-processor:$ver.serde")
    kapt("io.micronaut.validation:micronaut-validation")

//    compileOnly "org.projectlombok:lombok"
    compileOnly "io.micronaut:micronaut-inject-kotlin:$ver.core"
    compileOnly "io.micronaut.openapi:micronaut-openapi-annotations:$ver.openapi"
    compileOnly "com.fasterxml.jackson.core:jackson-annotations"

    implementation "io.micronaut.serde:micronaut-serde-api:$ver.serde"
    implementation "org.yaml:snakeyaml"
    implementation "io.micronaut:micronaut-management:$ver.core"
    implementation "io.micronaut.validation:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server-netty:$ver.core"
    implementation "io.micronaut:micronaut-http-client:$ver.core"
    implementation "io.micronaut:micronaut-runtime:$ver.core"
    implementation "io.micronaut.reactor:micronaut-reactor"

    runtimeOnly("io.micronaut.serde:micronaut-serde-jackson:$ver.serde")
    runtimeOnly("ch.qos.logback:logback-classic")

//    implementation "io.micronaut:micronaut-jackson-databind"

//    implementation "io.micronaut:micronaut-inject-kotlin"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor"
//    implementation "io.micronaut.security:micronaut-security-jwt"
//    implementation "io.micronaut.security:micronaut-security-oauth2"

// micronaut-data
//    annotationProcessor "io.micronaut.data:micronaut-data-processor"

//    implementation "io.micronaut.data:micronaut-data-jdbc"

//    runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"
//    runtimeOnly "org.postgresql:postgresql"
//    runtimeOnly "io.micronaut.flyway:micronaut-flyway"

}

/*
kapt{
    arguments {
        arg("sample.argument", "sample value")
        arg("micronaut.classloader.logging", "false")
        arg("micronaut.openapi.adoc.templates.links", "links1.ftl")
        arg("micronaut.openapi.expand.teststst", "this is test")

    }
}
*/

/*
tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}
*/

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-parameters',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
    ]
    options.fork = true
//    options.forkOptions.jvmArgs += "-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.js.url=/openapi/res/"
}

configurations.configureEach {
    resolutionStrategy {
//        dependencySubstitution {
//            substitute(module("io.micronaut:micronaut-jackson-databind"))
//                    .using(module("io.micronaut.serde:micronaut-serde-jackson:1.3.2"))
//        }

        cacheDynamicVersionsFor 0, 'minutes'
        cacheChangingModulesFor 0, 'minutes'
    }
}
